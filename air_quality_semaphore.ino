/*
 * Copyright (C) 2021 KuraLabs S.R.L
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#include <ArduinoJson.h>

#include <Adafruit_SCD30.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_BME280.h>
#include <Adafruit_NeoPixel.h>


static const char HEADER[] PROGMEM = 
  "    _    _         ___              _ _ _\n"
  "   / \\  (_)_ __   / _ \\ _   _  __ _| (_) |_ _   _\n"
  "  / _ \\ | | '__| | | | | | | |/ _` | | | __| | | |\n"
  " / ___ \\| | |    | |_| | |_| | (_| | | | |_| |_| |\n"
  "/_/   \\_\\_|_|     \\__\\_\\\\__,_|\\__,_|_|_|\\__|\\__, |\n"
  "                                            |___/\n"
  " ____                             _\n"
  "/ ___|  ___ _ __ ___   __ _ _ __ | |__   ___  _ __ ___\n"
  "\\___ \\ / _ \\ '_ ` _ \\ / _` | '_ \\| '_ \\ / _ \\| '__/ _ \\\n"
  " ___) |  __/ | | | | | (_| | |_) | | | | (_) | | |  __/\n"
  "|____/ \\___|_| |_| |_|\\__,_| .__/|_| |_|\\___/|_|  \\___|\n"
  "                           |_|\n"
;


/*
 * All bitmaps converted using https://javl.github.io/image2cpp/
 */

#define ICON_KURALABS_W 120
#define ICON_KURALABS_H 43

static const unsigned char ICON_KURALABS[] PROGMEM = {
  0x38, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 
  0x07, 0xfc, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf3, 0xff, 
  0xff, 0xf9, 0xfe, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0xff, 0xff, 0xff, 
  0xff, 0xfc, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0xff, 
  0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x7f, 0xff, 0xff, 0xff, 0xc0, 
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x7f, 0xff, 0xff, 0xff, 0xc1, 0xc0, 
  0x0e, 0x0e, 0x1c, 0x0e, 0x1f, 0xf0, 0x01, 0xc0, 0x38, 0xff, 0xff, 0xff, 0xff, 0xe3, 0x80, 0x0e, 
  0x1c, 0x1c, 0x0e, 0x1f, 0xfc, 0x01, 0xe0, 0x3c, 0xff, 0xff, 0xff, 0xff, 0xe7, 0x80, 0x0e, 0x38, 
  0x1c, 0x0e, 0x1f, 0xfc, 0x03, 0xe0, 0x3c, 0xff, 0xff, 0xff, 0xff, 0xe3, 0x80, 0x0e, 0x70, 0x1c, 
  0x0e, 0x1c, 0x1e, 0x03, 0xf0, 0x38, 0xff, 0xff, 0xff, 0xff, 0xe3, 0x80, 0x0e, 0xe0, 0x1c, 0x0e, 
  0x1c, 0x0e, 0x07, 0x70, 0x19, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x00, 0x0f, 0xe0, 0x1c, 0x0e, 0x1c, 
  0x1e, 0x07, 0x38, 0x1b, 0xff, 0xff, 0xff, 0xff, 0xf9, 0x00, 0x0f, 0xe0, 0x1c, 0x0e, 0x1e, 0x3c, 
  0x06, 0x38, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0xf0, 0x1c, 0x0e, 0x1f, 0xfc, 0x0e, 
  0x38, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0x70, 0x0e, 0x0e, 0x1f, 0xf0, 0x0f, 0xfc, 
  0x0f, 0xfe, 0xff, 0xff, 0xef, 0xfe, 0x00, 0x0e, 0x38, 0x0e, 0x0e, 0x1e, 0x70, 0x1f, 0xfc, 0x0f, 
  0xe3, 0x9f, 0xff, 0xb8, 0xfe, 0x00, 0x0e, 0x3c, 0x0f, 0x1e, 0x1c, 0x38, 0x1c, 0x1e, 0x0f, 0xf3, 
  0xcf, 0xfe, 0x79, 0xfe, 0x00, 0x0e, 0x1e, 0x0f, 0xfc, 0x1c, 0x3c, 0x38, 0x0e, 0x0f, 0xfb, 0xdf, 
  0xff, 0xfb, 0xfe, 0x00, 0x0e, 0x0e, 0x07, 0xf8, 0x1c, 0x1c, 0x38, 0x0f, 0x0f, 0xfe, 0x1f, 0xff, 
  0x0f, 0xfe, 0x00, 0x0c, 0x06, 0x01, 0xe0, 0x0c, 0x0e, 0x30, 0x06, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xfe, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x80, 0x00, 0xc0, 0x03, 
  0xc0, 0x06, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x80, 0x00, 0xc0, 0x02, 0x20, 
  0x00, 0x00, 0x00, 0x7f, 0xfe, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x80, 0x01, 0x20, 0x02, 0x20, 0x04, 
  0x00, 0x00, 0x3f, 0xfc, 0x03, 0xff, 0x80, 0x00, 0x00, 0x80, 0x01, 0x20, 0x03, 0xc0, 0x06, 0x00, 
  0x00, 0x1f, 0xff, 0xbf, 0xff, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x02, 0x20, 0x00, 0x80, 0x00, 
  0x0f, 0xfb, 0xfb, 0xfe, 0x00, 0x00, 0x00, 0x80, 0x03, 0xf0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x07, 
  0xfc, 0xf7, 0xfc, 0x00, 0x00, 0x00, 0x80, 0x02, 0x10, 0x02, 0x20, 0x00, 0x00, 0x00, 0x07, 0xff, 
  0xff, 0xfc, 0x00, 0x00, 0x00, 0xf8, 0x04, 0x08, 0x03, 0xc0, 0x07, 0x80, 0x00, 0x03, 0xff, 0xff, 
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf8, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xf0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00
};


#define ICON_SMILE_GOOD_W 44
#define ICON_SMILE_GOOD_H 44

static const unsigned char ICON_SMILE_GOOD[] PROGMEM = {
  0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x3f, 0xc0, 0x3f, 0xc0, 0x00, 0x00, 0x7e, 0x00, 0x07, 0xe0, 0x00, 0x01, 0xf8, 
  0x00, 0x01, 0xf8, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x7c, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x3e, 0x00, 
  0x07, 0x80, 0x00, 0x00, 0x1e, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x1e, 0x00, 0x00, 0x00, 
  0x07, 0x80, 0x1c, 0x00, 0x00, 0x00, 0x03, 0x80, 0x3c, 0x07, 0x00, 0x0e, 0x03, 0xc0, 0x38, 0x0f, 
  0x80, 0x1f, 0x01, 0xc0, 0x78, 0x0f, 0x80, 0x1f, 0x01, 0xe0, 0x70, 0x0f, 0x80, 0x1f, 0x00, 0xe0, 
  0x70, 0x07, 0x80, 0x1e, 0x00, 0xe0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe0, 0x00, 
  0x00, 0x00, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0xf0, 0x70, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x70, 0x30, 0x00, 0x00, 0xc0, 0xe0, 0x78, 0x1c, 
  0x00, 0x01, 0x81, 0xe0, 0x38, 0x0e, 0x00, 0x07, 0x81, 0xc0, 0x3c, 0x07, 0xc0, 0x3e, 0x03, 0xc0, 
  0x1c, 0x01, 0xff, 0xf8, 0x03, 0x80, 0x1e, 0x00, 0x3f, 0xc0, 0x07, 0x80, 0x0f, 0x00, 0x00, 0x00, 
  0x0f, 0x00, 0x07, 0x80, 0x00, 0x00, 0x1e, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x3e, 0x00, 0x03, 0xe0, 
  0x00, 0x00, 0x7c, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x7e, 0x00, 0x07, 0xe0, 0x00, 
  0x00, 0x3f, 0xc0, 0x3f, 0xc0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfc, 
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00
};


#define ICON_SMILE_REGULAR_W 44
#define ICON_SMILE_REGULAR_H 44

static const unsigned char ICON_SMILE_REGULAR[] PROGMEM = {
  0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x3f, 0xc0, 0x3f, 0xc0, 0x00, 0x00, 0x7e, 0x00, 0x07, 0xe0, 0x00, 0x01, 0xf8, 
  0x00, 0x01, 0xf8, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x7c, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x3e, 0x00, 
  0x07, 0x80, 0x00, 0x00, 0x1e, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x1e, 0x00, 0x00, 0x00, 
  0x07, 0x80, 0x1c, 0x00, 0x00, 0x00, 0x03, 0x80, 0x3c, 0x07, 0x00, 0x0e, 0x03, 0xc0, 0x38, 0x0f, 
  0x80, 0x1f, 0x01, 0xc0, 0x78, 0x0f, 0x80, 0x1f, 0x01, 0xe0, 0x70, 0x0f, 0x80, 0x1f, 0x00, 0xe0, 
  0x70, 0x07, 0x80, 0x1e, 0x00, 0xe0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe0, 0x00, 
  0x00, 0x00, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0xf0, 0x70, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x78, 0x00, 
  0x00, 0x00, 0x01, 0xe0, 0x38, 0x3f, 0xff, 0xff, 0xc1, 0xc0, 0x3c, 0x3f, 0xff, 0xff, 0xc3, 0xc0, 
  0x1c, 0x00, 0x00, 0x00, 0x03, 0x80, 0x1e, 0x00, 0x00, 0x00, 0x07, 0x80, 0x0f, 0x00, 0x00, 0x00, 
  0x0f, 0x00, 0x07, 0x80, 0x00, 0x00, 0x1e, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x3e, 0x00, 0x03, 0xe0, 
  0x00, 0x00, 0x7c, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x7e, 0x00, 0x07, 0xe0, 0x00, 
  0x00, 0x3f, 0xc0, 0x3f, 0xc0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfc, 
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00
};


#define ICON_SMILE_BAD_W 44
#define ICON_SMILE_BAD_H 44

static const unsigned char ICON_SMILE_BAD[] PROGMEM = {
  0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x3f, 0xc0, 0x3f, 0xc0, 0x00, 0x00, 0x7e, 0x00, 0x07, 0xe0, 0x00, 0x01, 0xf8, 
  0x00, 0x01, 0xf8, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x7c, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x3e, 0x00, 
  0x07, 0x80, 0x00, 0x00, 0x1e, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x1e, 0x00, 0x00, 0x00, 
  0x07, 0x80, 0x1c, 0x00, 0x00, 0x00, 0x03, 0x80, 0x3c, 0x07, 0x00, 0x0e, 0x03, 0xc0, 0x38, 0x0f, 
  0x80, 0x1f, 0x01, 0xc0, 0x78, 0x0f, 0x80, 0x1f, 0x01, 0xe0, 0x70, 0x0f, 0x80, 0x1f, 0x00, 0xe0, 
  0x70, 0x07, 0x80, 0x1e, 0x00, 0xe0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe0, 0x00, 
  0x00, 0x00, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xf0, 0x00, 0x3f, 0xc0, 
  0x00, 0xf0, 0x70, 0x01, 0xff, 0xf8, 0x00, 0xe0, 0x70, 0x07, 0xe0, 0x3e, 0x00, 0xe0, 0x78, 0x0e, 
  0x00, 0x07, 0x01, 0xe0, 0x38, 0x1c, 0x00, 0x01, 0x81, 0xc0, 0x3c, 0x30, 0x00, 0x00, 0xc3, 0xc0, 
  0x1c, 0x00, 0x00, 0x00, 0x03, 0x80, 0x1e, 0x00, 0x00, 0x00, 0x07, 0x80, 0x0f, 0x00, 0x00, 0x00, 
  0x0f, 0x00, 0x07, 0x80, 0x00, 0x00, 0x1e, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x3e, 0x00, 0x03, 0xe0, 
  0x00, 0x00, 0x7c, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x7e, 0x00, 0x07, 0xe0, 0x00, 
  0x00, 0x3f, 0xc0, 0x3f, 0xc0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfc, 
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00
};


#define ICON_SMILE_CRITICAL_W 44
#define ICON_SMILE_CRITICAL_H 44

static const unsigned char ICON_SMILE_CRITICAL[] PROGMEM = {
  0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x3f, 0xc0, 0x3f, 0xc0, 0x00, 0x00, 0x7e, 0x00, 0x07, 0xe0, 0x00, 0x01, 0xf8, 
  0x00, 0x01, 0xf8, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x7c, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x3e, 0x00, 
  0x07, 0x80, 0x00, 0x00, 0x1e, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x1e, 0x00, 0x00, 0x00, 
  0x07, 0x80, 0x1c, 0x08, 0x80, 0x11, 0x03, 0x80, 0x3c, 0x1d, 0xc0, 0x3b, 0x83, 0xc0, 0x38, 0x0f, 
  0x80, 0x1f, 0x01, 0xc0, 0x78, 0x07, 0x00, 0x0e, 0x01, 0xe0, 0x70, 0x0f, 0x80, 0x1f, 0x00, 0xe0, 
  0x70, 0x1d, 0xc0, 0x3b, 0x80, 0xe0, 0xf0, 0x18, 0xc0, 0x31, 0x80, 0xf0, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe0, 0x00, 
  0x00, 0x00, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xf0, 0x00, 0x3f, 0xc0, 
  0x00, 0xf0, 0x70, 0x01, 0xff, 0xf8, 0x00, 0xe0, 0x70, 0x07, 0xe0, 0x3e, 0x00, 0xe0, 0x78, 0x0e, 
  0x00, 0x07, 0x01, 0xe0, 0x38, 0x1c, 0x00, 0x01, 0x81, 0xc0, 0x3c, 0x30, 0x00, 0x00, 0xc3, 0xc0, 
  0x1c, 0x00, 0x00, 0x00, 0x03, 0x80, 0x1e, 0x00, 0x00, 0x00, 0x07, 0x80, 0x0f, 0x00, 0x00, 0x00, 
  0x0f, 0x00, 0x07, 0x80, 0x00, 0x00, 0x1e, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x3e, 0x00, 0x03, 0xe0, 
  0x00, 0x00, 0x7c, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x7e, 0x00, 0x07, 0xe0, 0x00, 
  0x00, 0x3f, 0xc0, 0x3f, 0xc0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfc, 
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00
};


#define ICON_UNITS_W 24
#define ICON_UNITS_H 64

static const unsigned char ICON_UNITS[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x1f, 0x80, 0x00, 0xdf, 0x80, 0x03, 0xff, 0xc0, 0x03, 0xff, 0xc0, 0x0f, 0xff, 0xf0, 0x1f, 0xff, 
  0xf8, 0x1f, 0xff, 0xf8, 0x1f, 0xff, 0xf8, 0x0f, 0xff, 0xf0, 0x07, 0xff, 0xe0, 0x00, 0xff, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x24, 0x00, 0x00, 0x42, 0x00, 0x00, 0x42, 
  0x00, 0x00, 0x42, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x5a, 0x00, 
  0x00, 0x5a, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x99, 0x00, 0x00, 0xbd, 0x00, 0x00, 
  0xbd, 0x00, 0x00, 0x99, 0x00, 0x00, 0x42, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 
  0x00, 0x3c, 0x00, 0x00, 0x66, 0x00, 0x00, 0xcb, 0x00, 0x00, 0x8d, 0x00, 0x01, 0x85, 0x80, 0x01, 
  0x00, 0x80, 0x01, 0x00, 0x80, 0x01, 0x00, 0x80, 0x01, 0x00, 0x80, 0x01, 0x81, 0x80, 0x00, 0xc3, 
  0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};



#define SCREEN_WIDTH                128
#define SCREEN_HEIGHT               64
#define SCREEN_RESET                33
#define SCREEN_ADDRESS              0x3C

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, SCREEN_RESET);


// Pressure at sea level of 1013.25  is a good global average, perfect for global deployment
// Pressure at sea level of 1011.0 is Costa Rica's pressure.
#define SENSOR_SEALEVELPRESSURE_HPA 1011.0
#define SENSOR_ADDRESS              0x77

Adafruit_BME280 sensor;


#define AIR_MEASUREMENT_INTERVAL    2

#define QUALITY_CO2_REGULAR         1000
#define QUALITY_CO2_BAD             1700
#define QUALITY_CO2_CRITICAL        2500

Adafruit_SCD30  air;


#define SEMAPHORE_IO                32
#define SEMAPHORE_LEDS              3

Adafruit_NeoPixel semaphore = Adafruit_NeoPixel(SEMAPHORE_LEDS, SEMAPHORE_IO, NEO_GRB + NEO_KHZ800);


#define MARGIN                      5
#define THIRDSCREEN                 (SCREEN_HEIGHT / 3)
#define LOADTIME                    3000
#define SCREENTIME                  3000


void abort() {
  while (true) { delay(10); }
}


void loadscreen(const __FlashStringHelper* message) {
  int16_t  x1, y1;
  uint16_t w, h;

  display.clearDisplay();

  display.drawBitmap(
    (SCREEN_WIDTH - ICON_KURALABS_W) / 2,
    MARGIN,
    ICON_KURALABS,
    ICON_KURALABS_W,
    ICON_KURALABS_H,
    SSD1306_WHITE
  );

  display.setTextSize(1);
  display.getTextBounds(message, 0, 0, &x1, &y1, &w, &h);
  display.setCursor(
    (SCREEN_WIDTH - w) / 2,
    (SCREEN_HEIGHT - h)
  );
  display.println(message);

  display.display();
}


struct SensorsData {
  float sensorTemperature;
  float sensorHumidity;
  float sensorPressure;
  float sensorAltitude;
  float airCO2;
  float airTemperature;
  float airHumidity;
};

static SensorsData lastReadings = {};


void updateAirSensor() {
  if (air.dataReady()) {
    if (!air.read()){
      Serial.println("ERROR: Error reading sensor data!");
    }
  }
}


void update() {
  updateAirSensor();

  lastReadings.sensorTemperature = sensor.readTemperature();
  lastReadings.sensorHumidity = sensor.readHumidity();
  lastReadings.sensorPressure = sensor.readPressure();
  lastReadings.sensorAltitude = sensor.readAltitude(SENSOR_SEALEVELPRESSURE_HPA);

  lastReadings.airCO2 = air.CO2;
  lastReadings.airTemperature = air.temperature;
  lastReadings.airHumidity = air.relative_humidity;
}


StaticJsonDocument<400> doc;

void logSensorData() {
  JsonObject rootDoc = doc.to<JsonObject>();
  rootDoc["time"] = millis();


  JsonObject sensorDoc = rootDoc.createNestedObject("bme280");

  JsonObject sensorTemperatureDoc = sensorDoc.createNestedObject("temperature");
  sensorTemperatureDoc["value"] = lastReadings.sensorTemperature;
  sensorTemperatureDoc["unit"] = "°C";

  JsonObject sensorHumidityDoc = sensorDoc.createNestedObject("humidity");
  sensorHumidityDoc["value"] = lastReadings.sensorHumidity;
  sensorHumidityDoc["unit"] = "%";

  JsonObject sensorPressureDoc = sensorDoc.createNestedObject("pressure");
  sensorPressureDoc["value"] = lastReadings.sensorPressure;
  sensorPressureDoc["unit"] = "hPa";

  JsonObject sensorAltitudeDoc = sensorDoc.createNestedObject("altitude");
  sensorAltitudeDoc["value"] = lastReadings.sensorAltitude;
  sensorAltitudeDoc["unit"] = "m.a.s.l";


  JsonObject airDoc = rootDoc.createNestedObject("scd30");

  JsonObject airCO2Doc = airDoc.createNestedObject("co2");
  airCO2Doc["value"] = lastReadings.airCO2;
  airCO2Doc["unit"] = "ppm";

  JsonObject airTemperatureDoc = airDoc.createNestedObject("temperature");
  airTemperatureDoc["value"] = lastReadings.airTemperature;
  airTemperatureDoc["unit"] = "°C";

  JsonObject airHumidityDoc = airDoc.createNestedObject("humidity");
  airHumidityDoc["value"] = lastReadings.airHumidity;
  airHumidityDoc["unit"] = "%";


  Serial.print("DATA: ");
  serializeJson(rootDoc, Serial);
  Serial.println();
}


void setup() {
  unsigned long time = millis();

  // Initialize serial interface
  Serial.begin(115200);
  while (!Serial) { delay(10); }
  delay(500); // Pause for half second so that serial console can reconnect

  Serial.println(HEADER);

  // Initialize display
  Serial.println(F("STATUS: Initializing display ..."));

  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("ERROR: Failed to initialize display!"));
    abort();
  }

  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setRotation(0);
  display.display();

  loadscreen(F("Iniciando ..."));

  Serial.println(F("STATUS: Display initialized"));

  // Initialize barometric, humidity and temperature sensor
  Serial.println(F("STATUS: Initializing barometric, humidity and temperature sensor ..."));
  
  if (!sensor.begin(SENSOR_ADDRESS, &Wire)) {
    Serial.println(F("ERROR: Failed to initialize barometric, humidity and temperature sensor!"));
    abort();
  }

  Serial.println(F("STATUS: Barometric, humidity and temperature sensor initialized"));

  // Initialize air quality sensor
  Serial.println(F("STATUS: Initializing air quality sensor ..."));
  
  if (!air.begin()) {
    Serial.println(F("ERROR: Failed to initialize air quality sensor!"));
    abort();
  }

  if (!air.setMeasurementInterval(AIR_MEASUREMENT_INTERVAL)) {
    Serial.println(F("ERROR: Failed to set measurement interval!"));
    abort();
  }

  if (!air.setAltitudeOffset(sensor.readAltitude(SENSOR_SEALEVELPRESSURE_HPA))) {
    Serial.println(F("ERROR: Failed to set altitude offset!"));
    abort();
  }

  updateAirSensor();

  Serial.print(F("STATUS: Measurement Interval: "));
  Serial.print(air.getMeasurementInterval());
  Serial.println(F(" seconds"));

  Serial.print(F("STATUS: Ambient pressure offset: "));
  Serial.print(air.getAmbientPressureOffset());
  Serial.println(F(" millibar"));

  Serial.print(F("STATUS: Altitude offset: "));
  Serial.print(air.getAltitudeOffset());
  Serial.println(F(" m.a.s.l"));

  Serial.print(F("STATUS: Temperature offset: "));
  Serial.print(air.getTemperatureOffset() / 100.0);
  Serial.println(" °C");

  Serial.println(F("STATUS: Air quality sensor initialized"));

  // Initialize semaphore
  Serial.println(F("STATUS: Initializing semaphore lights ..."));

  semaphore.begin();
  semaphore.show(); // Initialize all pixels to 'off'

  Serial.println(F("STATUS: Semaphore lights initialized"));


  Serial.print(F("STATUS: Board successfully initialized in "));
  Serial.print(millis() - time, DEC);
  Serial.println(" ms");

  delay(LOADTIME);
}


void loop() {

  update();
  logSensorData();

  // Show values
  display.clearDisplay();

  display.drawBitmap(0, 0, ICON_UNITS, ICON_UNITS_W, ICON_UNITS_H, SSD1306_WHITE);

  display.setTextSize(2);
  display.setCursor(ICON_UNITS_W + MARGIN, 0 * THIRDSCREEN + MARGIN);
  display.print(lastReadings.airCO2, 1);
  display.setTextSize(1);
  display.println(" ppm");

  display.setTextSize(2);
  display.setCursor(ICON_UNITS_W + MARGIN, 1 * THIRDSCREEN + MARGIN);
  display.print(lastReadings.airTemperature, 1);
  display.setTextSize(1);
  display.println(" \xf7\x43");

  display.setTextSize(2);
  display.setCursor(ICON_UNITS_W + MARGIN, 2 * THIRDSCREEN + MARGIN);
  display.print(lastReadings.airHumidity, 1);
  display.setTextSize(1);
  display.println(" %");

  display.display();
  delay(SCREENTIME);

  // Show smileys
  int16_t  x1, y1;
  uint16_t w, h;

  display.clearDisplay();
  display.setTextSize(1);

  if (lastReadings.airCO2 >= QUALITY_CO2_CRITICAL) {
    display.drawBitmap(
      (SCREEN_WIDTH - ICON_SMILE_CRITICAL_W) / 2,
      MARGIN,
      ICON_SMILE_CRITICAL,
      ICON_SMILE_CRITICAL_W,
      ICON_SMILE_CRITICAL_H,
      SSD1306_WHITE
    );
    display.getTextBounds(F("CRITICO!!"), 0, 0, &x1, &y1, &w, &h);
    display.setCursor(
      (SCREEN_WIDTH - w) / 2,
      ICON_SMILE_CRITICAL_H + 2 * MARGIN
    );
    display.println(F("CRITICO!!"));

  } else if (lastReadings.airCO2 >= QUALITY_CO2_BAD) {
    display.drawBitmap(
      (SCREEN_WIDTH - ICON_SMILE_BAD_W) / 2,
      MARGIN,
      ICON_SMILE_BAD,
      ICON_SMILE_BAD_W,
      ICON_SMILE_BAD_H,
      SSD1306_WHITE
    );
    display.getTextBounds(F("MALO!"), 0, 0, &x1, &y1, &w, &h);
    display.setCursor(
      (SCREEN_WIDTH - w) / 2,
      ICON_SMILE_CRITICAL_H + 2 * MARGIN
    );
    display.println(F("MALO!"));

  } else if (lastReadings.airCO2 >= QUALITY_CO2_REGULAR) {
    display.drawBitmap(
      (SCREEN_WIDTH - ICON_SMILE_REGULAR_W) / 2,
      MARGIN,
      ICON_SMILE_REGULAR,
      ICON_SMILE_REGULAR_W,
      ICON_SMILE_REGULAR_H,
      SSD1306_WHITE
    );
    display.getTextBounds(F("REGULAR"), 0, 0, &x1, &y1, &w, &h);
    display.setCursor(
      (SCREEN_WIDTH - w) / 2,
      ICON_SMILE_CRITICAL_H + 2 * MARGIN
    );
    display.println(F("REGULAR"));

  } else {
    display.drawBitmap(
      (SCREEN_WIDTH - ICON_SMILE_GOOD_W) / 2,
      MARGIN,
      ICON_SMILE_GOOD,
      ICON_SMILE_GOOD_W,
      ICON_SMILE_GOOD_H,
      SSD1306_WHITE
    );
    display.getTextBounds(F("BUENO"), 0, 0, &x1, &y1, &w, &h);
    display.setCursor(
      (SCREEN_WIDTH - w) / 2,
      ICON_SMILE_CRITICAL_H + 2 * MARGIN
    );
    display.println(F("BUENO"));
  }

  display.display();
  delay(SCREENTIME);
}
